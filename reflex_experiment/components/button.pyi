"""Stub file for reflex_experiment/components/button.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import (
    Any,
    Optional,
    Sequence,
    overload,
)
from reflex.event import EventType
from reflex.style import Style
from reflex.vars.base import Var
import reflex as rx
from reflex.utils import types

def test(ev: rx.Var) -> tuple[rx.Var[str], rx.Var[int]]: ...

class Base(rx.Component):
    def get_event_triggers(
        self,
    ) -> dict[str, types.ArgsSpec | Sequence[types.ArgsSpec]]: ...
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        style: Style | None = None,
        key: Any | None = None,
        id: Any | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        **props,
    ) -> "Base":
        """Create the component.

        Args:
            *children: The children of the component.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component."""
        ...

class Button(Base):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        foo: Var[str] | str | None = None,
        style: Style | None = None,
        key: Any | None = None,
        id: Any | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_bar: Optional[EventType[()] | EventType[str] | EventType[str, int]] = None,
        **props,
    ) -> "Button":
        """Create the component.

        Args:
            *children: The children of the component.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component."""
        ...

button = Button.create
__all__ = ["button", "Button"]
